
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

#include "scp_keynodes.scsy"
#include "lib_keynodes.scsy"
#include "testdata.scsy"

program(test1,
[[
	rel1 = {
		{ 1_: a, 2_: b },
		{ 1_: c, 2_: d }
	};
	bin_ord_at_1; test_success; test_failure;
]], [{ first}])

callReturn([1_: fixed_: bin_ord_at_1, 2_: {[1_: rel1, 2_: d, 3_: first]}])
ifVarAssign([1_: first],, test1_failure)
ifCoin([1_: fixed_: first, 2_: fixed_: c],, test1_failure) 

print([1_: fixed_: test_success])
return()

label(test1_failure)
print([1_: fixed_: test_failure])
return()

end

program(test2,
[[
	rel2 = {
		{ 1_: a, 2_: b }
	};
	bin_ord_at_1; test_success; test_failure;
]],
[{ first }])

callReturn([1_: fixed_: bin_ord_at_1, 2_: {[1_: rel2, 2_: d, 3_: first]}])
ifVarAssign([1_: first], test2_failure)

print([1_: fixed_: test_success])
return()

label(test2_failure)
print([1_: fixed_: test_failure])
return()

end

program(test3,
[[
	testdata_two;
	testdata_one;
	testdata_relation;
	bin_ord_at_1;
	test_success;
	test_failure;
]],
[{ first }])

callReturn([1_: fixed_: bin_ord_at_1, 2_: {[1_: testdata_relation, 2_: testdata_two, 3_: first]}])
ifVarAssign([1_: first], test3_failure)

print([1_: fixed_: test_success])
return()

label(test3_failure)
print([1_: fixed_: test_failure])
return()

end

program(test4,
[[
	testdata_A;
	testdata_B;
	testdata_relation;
	bin_ord_at_1; test_success; test_failure;
]],
[{ first, descr }])

callReturn([1_: fixed_: bin_ord_at_1, 2_: {[1_: testdata_relation, 2_: testdata_B, 3_: first]}])
ifVarAssign([1_: first],, test4_failure)
ifCoin([1_: fixed_: first, 2_: fixed_: testdata_A],, test4_failure) 

print([1_: fixed_: test_success])
return()

label(test4_failure)
print([1_: fixed_: test_failure])
return()

end

program(test5,
[[
	testdata_C;
	testdata_D;
	testdata_relation;
	bin_ord_at_1; test_success; test_failure;
]],
[{ first }])

callReturn([1_: fixed_: bin_ord_at_1, 2_: {[1_: testdata_relation, 2_: testdata_D, 3_: first]}])
ifVarAssign([1_: first],, test5_failure)
ifCoin([1_: fixed_: first, 2_: fixed_: testdata_C],, test5_failure) 

print([1_: fixed_: test_success])
return()

label(test5_failure)
print([1_: fixed_: test_failure])
return()

end
