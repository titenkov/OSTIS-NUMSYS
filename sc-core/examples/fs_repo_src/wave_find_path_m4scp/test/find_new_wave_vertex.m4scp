/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

#include "scp_keynodes.scsy"
#include "lib_keynodes.scsy"
#include "../wave_find_path_keynodes.scsy"

program(test1, 
[[
	test_graph = {
		vertex_: v1, vertex_: v2, vertex_: v3, vertex_: v4, vertex_: v5, 
		edge_: e1 = {v1, v2},
		edge_: e2 = {v1, v3},
		edge_: e3 = {v2, v3},
		edge_: e4 = {v2, v5},
		edge_: e5 = {v5, v4},
		edge_: e6 = {v3, v4}
	};
	
	test1_last_wave = {v1};
	test1_not_checked_vertexes = {v3, v4, v5};
	test_success; test_failure;
]], [{a, n, arc, edges}], {[]})

callReturn([
	1_: fixed_: find_new_wave_vertex, 
	2_: {[1_: test_graph, 2_: test1_last_wave, 3_: test1_not_checked_vertexes, 4_: n, 5_: a]}])

ifVarAssign([1_: n],, test1_failure)
ifVarAssign([1_: a],, test1_failure)
ifEq([1_: fixed_: n, 2_: fixed_: v3],, test1_failure) 
searchElStr3([
    1_:  fixed_: test1_not_checked_vertexes,
    2_: assign_: arc,
    3_:  fixed_: v3
])
ifEq([1_: fixed_: a, 2_: fixed_: arc],, test1_failure) 

print([1_: fixed_: test_success])
return()

label(test1_failure)
print([1_: fixed_: test_failure])
return()

end
